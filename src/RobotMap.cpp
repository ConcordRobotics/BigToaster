// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::driveMotorsFrontLeftSC = NULL;
SpeedController* RobotMap::driveMotorsFrontRightSC = NULL;
SpeedController* RobotMap::driveMotorsBackLeftSC = NULL;
SpeedController* RobotMap::driveMotorsBackRightSC = NULL;
SpeedController* RobotMap::liftMotor = NULL;
RobotDrive* RobotMap::driveMotorsRobotDrive = NULL;
Gyro* RobotMap::driveMotorsGyro1 = NULL;
Encoder* RobotMap::driveMotorsQuadratureEncoder1 = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
BuiltInAccelerometer* RobotMap::driveMotorsAccelerometer = NULL;
PIDController* RobotMap::driveMotorsHeadingPIDController = NULL;
drivePIDOutput* RobotMap::driveMotorsHeadingPIDOutput = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	driveMotorsFrontLeftSC = new Talon(1);
	lw->AddActuator("DriveMotors", "FrontLeftSC", (Talon*) driveMotorsFrontLeftSC);
	
	driveMotorsFrontRightSC = new Talon(3);
	lw->AddActuator("DriveMotors", "FrontRightSC", (Talon*) driveMotorsFrontRightSC);
	
	driveMotorsBackLeftSC = new Talon(2);
	lw->AddActuator("DriveMotors", "BackLeftSC", (Talon*) driveMotorsBackLeftSC);
	
	driveMotorsBackRightSC = new Talon(0);
	lw->AddActuator("DriveMotors", "BackRightSC", (Talon*) driveMotorsBackRightSC);


	
	driveMotorsRobotDrive = new RobotDrive(driveMotorsFrontLeftSC, driveMotorsBackLeftSC,
              driveMotorsFrontRightSC, driveMotorsBackRightSC);
	

	driveMotorsRobotDrive->SetSafetyEnabled(true);
        driveMotorsRobotDrive->SetExpiration(0.1);
        driveMotorsRobotDrive->SetSensitivity(0.5);
        driveMotorsRobotDrive->SetMaxOutput(1.0);
        driveMotorsRobotDrive->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
        driveMotorsRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
	driveMotorsGyro1 = new Gyro(0);
	lw->AddSensor("DriveMotors", "Gyro 1", driveMotorsGyro1);
	driveMotorsGyro1->SetSensitivity(0.007);
	driveMotorsQuadratureEncoder1 = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("DriveMotors", "Quadrature Encoder 1", driveMotorsQuadratureEncoder1);
	driveMotorsQuadratureEncoder1->SetDistancePerPulse(1.0);
        driveMotorsQuadratureEncoder1->SetPIDSourceParameter(Encoder::kRate);

	liftSC = new Victor(4);
	liftMotor = new RobotDrive(liftSC);
	lw->AddActuator("Lift", "LiftMotor", (Victor*) liftSC);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	driveMotorsAccelerometer = new BuiltInAccelerometer();
	lw->AddSensor("DriveMotors", "Accelerometer", driveMotorsAccelerometer);

	driveMotorsHeadingPIDOutput = new drivePIDOutput(0.0);
	//lw->AddActuator("DriveMotors", "HeadingPIDoutput", (PIDOutput*) driveMotorsHeadingPIDOutput);
	
	driveMotorsHeadingPIDController = new PIDController(100.0, 0.0, 0.0,/* F: 0.0, */ driveMotorsGyro1, driveMotorsHeadingPIDOutput, 0.02);
	lw->AddActuator("DriveMotors", "HeadingPIDController", driveMotorsHeadingPIDController);
	driveMotorsHeadingPIDController->SetContinuous(false); driveMotorsHeadingPIDController->SetAbsoluteTolerance(0.2);
        driveMotorsHeadingPIDController->SetOutputRange(-1.0, 1.0);

}
