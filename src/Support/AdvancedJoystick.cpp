// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include <Support/AdvancedJoystick.h>
#include <tgmath.h>

// Constructor sets the deadband and gain, and passes the port to the base constructor
AdvancedJoystick::AdvancedJoystick(uint32_t port, float deadbandIn[3], float eGainIn[3] ) : Joystick(port) {
	for (int i = 0; i < 3; i++) {
		deadband[i] = deadbandIn[i];
		eGain[i] = eGainIn[i];
	}
}

float AdvancedJoystick::ApplyDeadBand(float input, int channel) {
	float output;
	if (input > deadband[channel]) {
		output = (input - deadband[channel])/(1.0 - deadband[channel]);
	} else if (input < deadband[channel]) {
		output = (input + deadband[channel])/(1.0 - deadband[channel]);
	} else {
		output = 0.0;
	}
	return output;
}

float AdvancedJoystick::ApplyEGain(float input, int channel) {
	float output;
	output = exp(eGain[channel]*abs(input))/exp(eGain[channel])*input;
	return output;
}

float AdvancedJoystick::aGetX () {
	float output;
	output = GetX();
	output = ApplyDeadBand(output,0);
	output = ApplyEGain(output,0);
	return output;
}

float AdvancedJoystick::aGetY () {
	float output;
	output = GetY();
	output = ApplyDeadBand(output,1);
	output = ApplyEGain(output,1);
	return output;
}

float AdvancedJoystick::aGetTwist () {
	float output;
	output = GetTwist();
	output = ApplyDeadBand(output,2);
	output = ApplyEGain(output,2);
	return output;
}
