// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "Commands/LinearHoldPosition.h"


LinearHoldPosition::LinearHoldPosition(Subsystem* sysIn, LinearSystem* linSys) {
	// Use requires() here to declare subsystem dependencies
	Requires(sysIn);
	sys = linSys;
}


// Called just before this Command runs the first time
void LinearHoldPosition::Initialize() {
	sys->SetMode(cPIDController::POSITION);
#ifdef OUTPUT
	std::cout << "COM START " << sys->name << " Hold " << RobotMap::timer->Get() << "\n";
#endif
}

// Called repeatedly when this Command is scheduled to run
void LinearHoldPosition::Execute() {
	sys->SetSetpoint(sys->controller->GetSetpoint());
	sys->UpdateController();
}

// Make this return true when this Command no longer needs to run execute()
bool LinearHoldPosition::IsFinished() {
	// Require it to be in position for one second before it is flagged as done
	return false;
}

// Called once after isFinished returns true
void LinearHoldPosition::End() {
	sys->Stop();
#ifdef OUTPUT
	std::cout << "COM END " << sys->name << " Pos " << RobotMap::timer->Get() << "\n";
#endif
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void LinearHoldPosition::Interrupted() {
	sys->Stop();
#ifdef OUTPUT
	std::cout << "COM END " << sys->name << " Pos " << RobotMap::timer->Get() << "\n";
#endif
}
