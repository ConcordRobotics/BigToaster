// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ZeroLift.h"
#include "Support/SingleMotor.h"

ZeroLift::ZeroLift() {
	// Use requires() here to declare subsystem dependencies
	Requires(Robot::lift);
	// Set the time needed to consider the lift as stopped
	stopTime = 0.1;
	// Set the tolerance on the encoder to consider the lift as stopped
	rateTol = 0.1;
	timer = new Timer();
	timer->Start();
}

// Called just before this Command runs the first time
void ZeroLift::Initialize() {
	
}

// Called repeatedly when this Command is scheduled to run
void ZeroLift::Execute() {
    // Command the robot to lower
	Robot::lift->SetPower(-0.05);
	double rate = RobotMap::liftEncoder->GetRate();
	// If it isn't stopped, reset the timer
	if (std::abs(rate) > rateTol) timer->Reset();
}

// Make this return true when this Command no longer needs to run execute()
bool ZeroLift::IsFinished() {
	bool finished = false;
	if (timer->Get() > stopTime) finished = true;
	return finished;
}

// Called once after isFinished returns true
void ZeroLift::End() {
	// Stop the motor
	Robot::lift->SetPower(0.0);
	Robot::lift->liftSC->Set(0.0);
	// Set the position of the encoder to zero
	RobotMap::liftEncoder->Reset();

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ZeroLift::Interrupted() {
	// Stop the motor, but do not reset position since it was interrupted.
	Robot::lift->SetPower(0.0);
	Robot::lift->liftSC->Set(0.0);
}
