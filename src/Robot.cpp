// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
// Test of Git
#include "Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

DriveMotors* Robot::driveMotors = 0;
OI* Robot::oi = 0;
Lift* Robot::lift = 0;
Claw* Robot::claw = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION



void Robot::RobotInit() {


	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
#ifdef DEBUG
	std::cout << "Robot adding drive motors\n";
#endif
	driveMotors = new DriveMotors();
#ifdef DEBUG
	std::cout << "Robot adding lift \n";
#endif
	lift = new Lift();
#ifdef DEBUG
	std::cout << "Robot adding claw motors\n";
#endif
	claw = new Claw();


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
#ifdef DEBUG
	std::cout << "Robot adding OI\n";
#endif
	oi = new OI();
#ifdef DEBUG
	std::cout << "Robot adding live windows\n";
#endif
	lw = LiveWindow::GetInstance();

	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
#ifdef DEBUG
	std::cout << "Robot adding Autonomous\n";
#endif
	chooser = new SendableChooser();
	chooser->AddDefault("Auto Off", new AutonomousCommandGroup(RobotMap::OFF));
	chooser->AddDefault("Auto Left", new AutonomousCommandGroup(RobotMap::LEFT));
	chooser->AddDefault("Auto Center", new AutonomousCommandGroup(RobotMap::CENTER));
	chooser->AddDefault("Auto Right", new AutonomousCommandGroup(RobotMap::RIGHT));

    SmartDashboard::PutData(Scheduler::GetInstance());
    SmartDashboard::PutData(lift);
    SmartDashboard::PutData(claw);

#ifdef DEBUG
	std::cout << "Adding Camera\n";
#endif
	CameraServer::GetInstance()->SetQuality(50);
	CameraServer::GetInstance()->StartAutomaticCapture("cam0");


#ifdef DEBUG
	std::cout << "Robot initialization complete\n";
#endif

  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand = (Command *) chooser->GetSelected();
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != NULL)
		autonomousCommand->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

