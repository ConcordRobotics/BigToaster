// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Commands/LinearSysRate.h"
#include "Commands/LinearSysPosition.h"
#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DriveInTelop.h"
#include "Commands/TestDrive.h"
#include "RobotMap.h"
#include "Commands/AutotunePID.h"
#include "Commands/AutotunePIDv.h"
#include "Support/cPIDController.h"
#include "Commands/ClawRate.h"
#include "RobotMap.h"
#include "Commands/SetDrivePower.h"
#include "Commands/SetGyroPower.h"
#include "Commands/SetGyroMode.h"
#include "Commands/SetDriveMode.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	//ToDo Adjust deadband and exp gains on joystick
	// The values below are for the x,y, and twist axes.
	// Set these based on driving "feel".
	// May be best to adjust when Jim in NH
	// We may want to add two modes the driver - fast vs. precise.
    float deadband[3] = {0.1, 0.1, 0.1};
    float eGain[3] = {0.25, 0.25, 0.25};
	joystick1 = new AdvancedJoystick(0, deadband, eGain);
	joystick2 = new Joystick(1);
#ifdef DEBUG
	std::cout << "Starting OI\n";
#endif

	// Positions for lift and claw are in a percent of the total range in case the ranges
	// shift due to encoder error, or bad initial starting position
	RaiseLiftRateButton = new JoystickButton(joystick2, 1);
	RaiseLiftRateButton->WhileHeld(new LinearSysRate(Robot::lift,Robot::lift, 10.0));


	LowerLiftRateButton = new JoystickButton(joystick2, 2);
	LowerLiftRateButton->WhileHeld(new LinearSysRate(Robot::lift,Robot::lift, -10.0));


	// Positions for lift and claw are in a percent of the total range in case the ranges
	// shift due to encoder error, or bad initial starting position
	RaiseLiftFastRateButton = new JoystickButton(joystick2, 4);
	RaiseLiftFastRateButton->WhileHeld(new LinearSysRate(Robot::lift,Robot::lift, 20.0));
	SmartDashboard::PutData("RaiseLiftFast", new LinearSysRate(Robot::lift,Robot::lift, 20.0));

	LowerLiftFastRateButton = new JoystickButton(joystick2, 3);
	LowerLiftFastRateButton->WhileHeld(new LinearSysRate(Robot::lift,Robot::lift, -20.0));
	SmartDashboard::PutData("LowerLiftFast", new LinearSysRate(Robot::lift,Robot::lift, -20.0));

	OpenClawRateButton = new JoystickButton(joystick2, 5);
	OpenClawRateButton->WhileHeld(new ClawRate(0.8));
	SmartDashboard::PutData("CloseClawRate", new ClawRate(1.0));

	CloseClawRateButton = new JoystickButton(joystick2, 6);
	CloseClawRateButton->WhileHeld(new ClawRate(-0.8));
	SmartDashboard::PutData("CloseClawRate", new ClawRate(-1.0));

	ClawOpenPosButton = new JoystickButton(joystick2, 7);
	ClawOpenPosButton->WhileHeld(new ClawRate(1.0));

	ClawClosedPosButton = new JoystickButton(joystick2, 8);
	ClawClosedPosButton->WhileHeld(new ClawRate(-1.0));


	// Setting Drive motor mode M=Manual, P=PID, First value is gyro, second is drive motors
	MMDriveButton = new JoystickButton(joystick1, 5);
	MMDriveButton->WhileHeld(new SetDriveMode(cPIDController::RATE));

	MPDriveButton = new JoystickButton(joystick1, 6);
	MPDriveButton->WhileHeld(new SetGyroMode(cPIDController::RATE));

	PMDriveButton = new JoystickButton(joystick1, 3);
	PMDriveButton->WhileHeld(new SetDriveMode(cPIDController::DIRECT));

	PPDriveButton = new JoystickButton(joystick1, 4);
	PPDriveButton->WhileHeld(new SetGyroMode(cPIDController::DIRECT));

// Buttons to control speeds
	gyroLoButton = new JoystickButton(joystick1, 12);
	gyroLoButton->WhenPressed(new SetGyroPower(0.3));
	gyroMedButton = new JoystickButton(joystick1, 10);
	gyroMedButton->WhenPressed(new SetGyroPower(0.6));
	gyroHighButton = new JoystickButton(joystick1, 8);
	gyroHighButton->WhenPressed(new SetGyroPower(1.0));
	driveLoButton = new JoystickButton(joystick1, 11);
	driveLoButton->WhenPressed(new SetDrivePower(0.3));
	driveMedButton = new JoystickButton(joystick1, 9);
	driveMedButton->WhenPressed(new SetDrivePower(0.6));
	driveHighButton = new JoystickButton(joystick1, 7);
	driveHighButton->WhenPressed(new SetDrivePower(1.0));

#ifdef DEBUG
	std::cout << "OI init complete\n";
#endif

}

AdvancedJoystick* OI::getJoystick1() {
	return joystick1;
}

Joystick* OI::getJoystick2() {
	return joystick2;
}

