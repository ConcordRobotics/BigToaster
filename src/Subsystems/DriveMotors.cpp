// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveMotors.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveInTelop.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES


DriveMotors::DriveMotors() : Subsystem("DriveMotors") {

	flMotor = RobotMap::driveMotorsFrontLeftMotor;
	frMotor = RobotMap::driveMotorsFrontRightMotor;
	blMotor = RobotMap::driveMotorsBackLeftMotor;
	brMotor = RobotMap::driveMotorsBackRightMotor;

	gyro1 = RobotMap::driveMotorsGyro1;
	gyro1->Reset();
    gyroControlled = false;

	accelerometer = RobotMap::driveMotorsAccelerometer;

	headingCont = RobotMap::driveMotorsGyroController;

}
    
void DriveMotors::InitDefaultCommand() {
	// Set the default command for a subsystem here.

	SetDefaultCommand(new DriveInTelop());

}
void DriveMotors::ArcadeDrive (float dx, float dy, float dz) {
	float x,y,z;
	x = dx;
	y = dy;
	z = dz;
	if (gyroControlled) {
		headingCont->SetTarget(z);
		headingCont->SetPosition(gyro1->GetAngle());
		z = headingCont->controlOutput;
	}

    // Negate y for the joystick. Is this needed?
    y = -y;

    double wheelSpeeds[4];
    wheelSpeeds[0] = x + y + z;
    wheelSpeeds[1] = -x + y - z;
    wheelSpeeds[2] = -x + y + z;
    wheelSpeeds[3] = x + y - z;
    flMotor->SetTarget(wheelSpeeds[0]);
    frMotor->SetTarget(wheelSpeeds[1]);
    blMotor->SetTarget(wheelSpeeds[2]);
    brMotor->SetTarget(wheelSpeeds[3]);
    flMotor->UpdateController();
    frMotor->UpdateController();
    blMotor->UpdateController();
    brMotor->UpdateController();
    flMotor->SetPower();
    frMotor->SetPower();
    blMotor->SetPower();
    brMotor->SetPower();
}



