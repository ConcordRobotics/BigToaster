// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveMotors.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveInTelop.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

DriveMotors::DriveMotors() : Subsystem("DriveMotors") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	frontLeftSC = RobotMap::driveMotorsFrontLeftSC;
	frontRightSC = RobotMap::driveMotorsFrontRightSC;
	backLeftSC = RobotMap::driveMotorsBackLeftSC;
	backRightSC = RobotMap::driveMotorsBackRightSC;
	robotDrive = RobotMap::driveMotorsRobotDrive;
	gyro1 = RobotMap::driveMotorsGyro1;
	headingPIDOutput = RobotMap::driveMotorsHeadingPIDOutput;
	headingPIDController = RobotMap::driveMotorsHeadingPIDController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	gyro1->Reset();
    targetHeading = gyro1->GetAngle();
    turning = false;
}
    
void DriveMotors::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new DriveInTelop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void DriveMotors::arcadeDrive(float dx, float dy, float dz) {
	if (turning){
		if (dz==0){
			turning = false;
			targetHeading = gyro1->GetAngle();
		} else {
			headingPIDController->SetSetpoint(targetHeading);
			dz = headingPIDController->Get();
		}
	}
	RobotMap::driveMotorsRobotDrive->MecanumDrive_Cartesian(dx,dy,dz);
	Wait(0.005); // wait 5ms to avoid hogging CPU cycles
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

