// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Lift.h"
#include "../RobotMap.h"
#include "Robot.h"
#include "LiveWindow/LiveWindow.h"
#include "Commands/LinearSysRate.h"


Lift::Lift() : LinearSystem(), Subsystem("Lift") {
	sc = RobotMap::liftSC;
	encoder = RobotMap::liftEncoder;
	positionController = RobotMap::liftPositionController;
	rateController = RobotMap::liftRateController;
	upperSwitch = RobotMap::liftUpperSwitch;
	lowerSwitch = RobotMap::liftLowerSwitch;
	name = new char[5];
	strcpy(name,"Lift");
	SmartDashboard::PutNumber("LiftUpper",upperSwitch->Get());
	SmartDashboard::PutNumber("LiftLower",lowerSwitch->Get());
	mode = OFF;
	Stop();
	positionController->LogData(true,"lift.pos");
	rateController->LogData(true,"lift.rate");
}

void Lift::UpdateController( double ffIn) {
    std::cout << "In Lift update controllers";
	EnforceLimits();
	double ff = 1.0; // To account for gravity
	LinearSystem::UpdateController(ff);
}
void Lift::InitDefaultCommand() {
	// Set the default command for a subsystem here.

	//SetDefaultCommand(new LinearSysRate(Robot::lift,Robot::lift,0.0));

}

void Lift::EnforceLimits() {
	// Add something for the limit switch
	// Don't reset distance to zero since the lift can unwind past zero
//	bool atBottom = false;
//	bool atTop = false;
	SmartDashboard::PutNumber("LiftUpper",upperSwitch->Get());
	SmartDashboard::PutNumber("LiftLower",lowerSwitch->Get());
//	if (lowerSwitch->Get() == CLOSED) {
//		atBottom = true;
//		encoder->Reset();
//	} else if (upperSwitch->Get() == CLOSED) {
//		atTop = true;
//	}
//	// ToDo Create some soft limits
//	double distance = encoder->GetDistance();
//	if (mode == RATE) {
//
//		//if (atBottom and )
//	}
	// Don't do anything for position - we shouldn't be commanding a negative position.
}
