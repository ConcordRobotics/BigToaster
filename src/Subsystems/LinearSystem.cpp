// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include <Subsystems/LinearSystem.h>
#include "../RobotMap.h"
#include "LiveWindow/LiveWindow.h"

LinearSystem::LinearSystem() {
	sc = NULL;
	encoder = NULL;
	controller = NULL;
	mode = cPIDController::OFF;
	lim = NULL;
	positionGains = NULL;
	rateGains = NULL;

}


void LinearSystem::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//setDefaultCommand(new ClawInTelop());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void LinearSystem::SetMode(int modeIn) {
	mode = modeIn;
	if (mode == cPIDController::RATE) {
		controller->SetPIDParams(rateGains);
	} else if (mode == cPIDController::POSITION) {
		controller->SetPIDParams(positionGains);
	}
	controller->SetMode(mode);
}

void LinearSystem::UpdateController() {
	EnforceLimits();
	switch (mode) {
	case cPIDController::OFF:
		Stop();
		break;
	case cPIDController::DIRECT:
		SetFeedForward();
		break;
	case cPIDController::RATE:
		controller->SetRate(setPoint);
		break;
	case cPIDController::POSITION:
		controller->SetSetpoint(setPoint);
		break;
	}
	controller->UpdateController(sc->Get());
	Wait(RobotMap::MotorWaitTime); // wait 5ms to avoid hogging CPU cycles

}

double LinearSystem::PositionError(double target) {
	return (std::abs(controller->GetSetpoint() - encoder->GetDistance())/lim->pRange);
}

void LinearSystem::SetSetpoint(double setPointIn) {
	setPoint = setPointIn;
}

void LinearSystem::Stop() {
	sc->Set(0.0);
}


